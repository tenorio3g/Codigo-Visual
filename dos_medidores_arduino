#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

#ifndef STASSID
#define STASSID "INFINITUM0111_2.4"  // Cambia esto por el nombre de tu red WiFi
#define STAPSK  "huT7zui8uVz"        // Cambia esto por la contraseña de tu red WiFi
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

ESP8266WebServer server(80);
const int led = 13;
int waterFlow1 = 0;  // Variable para el flujo de agua 1
int waterFlow2 = 0;  // Variable para el flujo de agua 2

// Función para manejar la página principal con actualización automática usando AJAX y Chart.js
void handleRoot() {
  digitalWrite(led, 1);
  String html = "<html><head>";
  html += "<meta charset='UTF-8'>";
  html += "<title>Flujo de Agua</title>";
  
  // Incluir la librería Chart.js
  html += "<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>";
  
  // Script para actualizar los datos de las gráficas y mostrar en tiempo real
  html += "<script>";
  html += "let flowData1 = [];";  // Datos para la gráfica 1
  html += "let flowData2 = [];";  // Datos para la gráfica 2
  html += "let labels = [];";      // Etiquetas para las gráficas
  html += "let chart1, chart2;";  // Gráficas
  
  // Función para actualizar la gráfica
  html += "function updateChart1(newFlow) {";
  html += "  if (flowData1.length > 10) { flowData1.shift(); labels.shift(); }";  // Limitar a los últimos 10 datos
  html += "  flowData1.push(newFlow);";
  html += "  labels.push(new Date().toLocaleTimeString());";
  html += "  chart1.update();";
  html += "}";
  
  // Función para actualizar la gráfica 2
  html += "function updateChart2(newFlow) {";
  html += "  if (flowData2.length > 10) { flowData2.shift(); }";  // Limitar a los últimos 10 datos
  html += "  flowData2.push(newFlow);";
  html += "  chart2.update();";
  html += "}";

  // Configurar la gráfica inicial
  html += "window.onload = function() {";
  html += "  const ctx1 = document.getElementById('flowChart1').getContext('2d');";
  html += "  chart1 = new Chart(ctx1, {";
  html += "    type: 'line',";
  html += "    data: {";
  html += "      labels: labels,";
  html += "      datasets: [{";
  html += "        label: 'Flujo de Agua 1 (L/min)',";
  html += "        data: flowData1,";
  html += "        borderColor: 'rgba(75, 192, 192, 1)',";
  html += "        borderWidth: 1";
  html += "      }]";
  html += "    },";
  html += "    options: { scales: { y: { beginAtZero: true } } }";
  html += "  });";

  html += "  const ctx2 = document.getElementById('flowChart2').getContext('2d');";
  html += "  chart2 = new Chart(ctx2, {";
  html += "    type: 'line',";
  html += "    data: {";
  html += "      labels: labels,";
  html += "      datasets: [{";
  html += "        label: 'Flujo de Agua 2 (L/min)',";
  html += "        data: flowData2,";
  html += "        borderColor: 'rgba(255, 99, 132, 1)',";
  html += "        borderWidth: 1";
  html += "      }]";
  html += "    },";
  html += "    options: { scales: { y: { beginAtZero: true } } }";
  html += "  });";
  html += "};";
  
  // Función para obtener los datos de flujo cada 5 segundos
  html += "setInterval(function() {";
  html += "  fetch('/data').then(response => response.json()).then(data => {";
  html += "    const flowValue1 = data.waterFlow1;";  // Obtener el flujo 1
  html += "    const flowValue2 = data.waterFlow2;";  // Obtener el flujo 2
  html += "    document.getElementById('flow1').innerHTML = 'Flujo 1: ' + flowValue1 + ' L/min';";
  html += "    document.getElementById('flow2').innerHTML = 'Flujo 2: ' + flowValue2 + ' L/min';";
  html += "    updateChart1(flowValue1);";  // Actualizar la gráfica 1
  html += "    updateChart2(flowValue2);";  // Actualizar la gráfica 2
  html += "  });";
  html += "}, 5000);";  // Intervalo de 5 segundos para actualizar datos
  html += "</script>";
  
  html += "</head><body>";
  html += "<h1>Datos de Flujo</h1>";
  html += "<div id='flow1'>Cargando datos de Flujo 1...</div>";  // Datos de flujo 1
  html += "<div id='flow2'>Cargando datos de Flujo 2...</div>";  // Datos de flujo 2
  
  // Contenedores para las gráficas
  html += "<canvas id='flowChart1' width='400' height='200'></canvas>"; // Gráfica 1
  html += "<canvas id='flowChart2' width='400' height='200'></canvas>"; // Gráfica 2
  
  html += "</body></html>";
  
  server.send(200, "text/html", html);
  digitalWrite(led, 0);
}

// Función para manejar la ruta que envía los datos de flujo de agua
void handleData() {
  waterFlow1 = random(6, 12);  // Simular un valor aleatorio de flujo de agua 1
  waterFlow2 = random(5, 10);   // Simular un valor aleatorio de flujo de agua 2
  String response = String("{\"waterFlow1\":") + String(waterFlow1) + String(",\"waterFlow2\":") + String(waterFlow2) + String("}");
  server.send(200, "application/json", response); // Enviar datos como JSON
}

// Función para manejar rutas no encontradas (404)
void handleNotFound() {
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: " + server.uri();
  message += "\nMethod: " + String(server.method() == HTTP_GET ? "GET" : "POST");
  message += "\nArguments: " + String(server.args());
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(void) {
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(9600);

  // Conectarse a la red WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.print("Conectado a ");
  Serial.println(ssid);
  Serial.print("Dirección IP: ");
  Serial.println(WiFi.localIP());

  // Configuración de MDNS para acceder usando "http://esp8266.local"
  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder iniciado");
  }

  // Rutas del servidor
  server.on("/", handleRoot);     // Página principal
  server.on("/data", handleData); // Ruta para los datos de flujo
  server.onNotFound(handleNotFound);  // Página 404
  
  // Iniciar servidor
  server.begin();
  Serial.println("Servidor HTTP iniciado");
}

void loop(void) {
  server.handleClient();  // Manejar solicitudes de clientes
  MDNS.update();          // Actualizar MDNS
}
